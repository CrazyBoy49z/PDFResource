{
    "docs": [
        {
            "location": "/", 
            "text": "PDFresource\n\n\nPDFresource is a MODX Revolution extra that converts resources to PDF files on saving the resource using mPDF (http://www.mpdf1.com/).\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.4+\n\n\nPHP v5.4+\n\n\n\n\nFeatures\n\n\n\n\nCreate a PDF file of a MODX resource with mPDF.\n\n\nThe options for the generated PDF could be set in MODX system settings and on resource base. \n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Home"
        }, 
        {
            "location": "/#pdfresource", 
            "text": "PDFresource is a MODX Revolution extra that converts resources to PDF files on saving the resource using mPDF (http://www.mpdf1.com/).  Requirements   MODX Revolution 2.4+  PHP v5.4+   Features   Create a PDF file of a MODX resource with mPDF.  The options for the generated PDF could be set in MODX system settings and on resource base.     \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "PDFresource"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for PDFresource in the Package Manager of a MODX installation and install it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you can manually install PDFresource.\n\n\n\n\nDownload the transport package from \nMODX Extras\n\n  (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.\n\n\nPDFresource should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package Management\n. \nThe GitHub repository of PDFresource contains a \nconfig.json\n \nto build that package locally. After downloading the github repository, you have to change into the \ncore/components/pdfresource\n folder \nand install mpdf with composer by invoking \ncomposer install\n. Use this option, if you want to debug PDFresource and/or contribute \nbugfixes and enhancements.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for PDFresource in the Package Manager of a MODX installation and install it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you can manually install PDFresource.   Download the transport package from  MODX Extras \n  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.  PDFresource should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package Management . \nThe GitHub repository of PDFresource contains a  config.json  \nto build that package locally. After downloading the github repository, you have to change into the  core/components/pdfresource  folder \nand install mpdf with composer by invoking  composer install . Use this option, if you want to debug PDFresource and/or contribute \nbugfixes and enhancements.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Build it from source"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nPDFresource\n works out of the box and creates PDF files from all resources, that have the template variable \ncreate_pdf\n assigned (the template variable name could be changed in MODX system settings). The generated PDF files are saved with the current alias path to \n{assets_url}/pdf/\n\n\nSo after the installation you only have to assign the template variable \ncreate_pdf\n to the templates of the resources that should be converted to PDF and check that template variable in the resource (checked by default).\n\n\nPDF options\n\n\nBy default the PDF content and the CSS code for the PDF could be changed with the chunks \ntplPDF\n and \ntplCSS\n. Some other PDF options (pagesize, margins etc.) could be set in MODX system setting.\n\n\nThe following MODX system settings are available in the namespace \npdfresource\n:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npdfresource.mode\n\n\nmPDF mode, see \nmPDF documentation\n\n\n\n\n\n\npdfresource.format\n\n\nPDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).\n\n\n\n\n\n\npdfresource.defaultFontSize\n\n\nPDF default font size\n\n\n\n\n\n\npdfresource.defaultFont\n\n\nPDF default font\n\n\n\n\n\n\npdfresource.mgl\n\n\nPDF margin left\n\n\n\n\n\n\npdfresource.mgr\n\n\nPDF margin right\n\n\n\n\n\n\npdfresource.mgt\n\n\nPDF margin top\n\n\n\n\n\n\npdfresource.mgb\n\n\nPDF margin bottom\n\n\n\n\n\n\npdfresource.mgh\n\n\nPDF margin header\n\n\n\n\n\n\npdfresource.mgf\n\n\nPDF margin footer\n\n\n\n\n\n\npdfresource.orientation\n\n\nPDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).\n\n\n\n\n\n\npdfresource.pdfTpl\n\n\nTemplate chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file.\n\n\n\n\n\n\npdfresource.cssTpl\n\n\nTemplate chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file.\n\n\n\n\n\n\npdfresource.pdfTv\n\n\nName ot the template variable that activates the PDF generation.\n\n\n\n\n\n\npdfresource.pdfTvTpl\n\n\nName of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change.\n\n\n\n\n\n\npdfresource.processTVs\n\n\nProcess template variables during PDF generation.\n\n\n\n\n\n\npdfresource.tvPrefix\n\n\nTemplate variable prefix in the template chunk.\n\n\n\n\n\n\n\n\nThe following MODX system settings have to be created to use them:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npdfresource.creator\n\n\nAuthor of the PDF file (defaults to \nsite_name\n system setting).\n\n\n\n\n\n\npdfresource.author\n\n\nCreator of the PDF file (defaults to \nsite_url\n system setting + \npowered by PDFresource/mPDF\n).\n\n\n\n\n\n\n\n\nResource based PDF options\n\n\nAll these options could be modified on resource base in a template variable \npdf_options\n (the template variable name could be changed in MODX system settings). This template variable has to contain an JSON encoded object of options without the prefix \npdfresource.\n.\n\n\nExample\n\n\n{\n    \nformat\n: \nA4-L\n,\n    \nmgl\n: 20,\n    \nmgr\n: 20\n}\n\n\n\n\nPDF content template\n\n\nThe content of the PDF is filled with the chunk defined by \npdfresource.pdfTpl\n MODX system setting (or on resource base by the \npdf_options\n template variable). By default PDFresource uses the \ntplPDF\n chunk. You could fill this chunk like a normal MODX template with resource placeholders, snippet calls etc. Since the PDF is not created on the fly, the content is fixed after saving the resource.\n\n\nPDF styles template\n\n\nThe style of the PDF is set with the chunk defined by \npdfresource.cssTpl\n MODX system setting (or on resource base by the \npdf_options\n template variable). By default PDFresource uses the \ntplCSS\n chunk. There are some limitations with mPDF and CSS (i.e. \nposition: absolute\n works only with elements on root level).\n\n\nLinking to a generated PDF\n\n\nAll generated PDF files are saved with the aliaspath of the generating resource. So if you want to create a link to that PDF file, you could use the following code:\n\n\na href=\n/assets/pdf/[[~[[*parent]]]][[*alias]].pdf\nPDF\n/a\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "PDFresource  works out of the box and creates PDF files from all resources, that have the template variable  create_pdf  assigned (the template variable name could be changed in MODX system settings). The generated PDF files are saved with the current alias path to  {assets_url}/pdf/  So after the installation you only have to assign the template variable  create_pdf  to the templates of the resources that should be converted to PDF and check that template variable in the resource (checked by default).  PDF options  By default the PDF content and the CSS code for the PDF could be changed with the chunks  tplPDF  and  tplCSS . Some other PDF options (pagesize, margins etc.) could be set in MODX system setting.  The following MODX system settings are available in the namespace  pdfresource :     Key  Description      pdfresource.mode  mPDF mode, see  mPDF documentation    pdfresource.format  PDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).    pdfresource.defaultFontSize  PDF default font size    pdfresource.defaultFont  PDF default font    pdfresource.mgl  PDF margin left    pdfresource.mgr  PDF margin right    pdfresource.mgt  PDF margin top    pdfresource.mgb  PDF margin bottom    pdfresource.mgh  PDF margin header    pdfresource.mgf  PDF margin footer    pdfresource.orientation  PDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).    pdfresource.pdfTpl  Template chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file.    pdfresource.cssTpl  Template chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file.    pdfresource.pdfTv  Name ot the template variable that activates the PDF generation.    pdfresource.pdfTvTpl  Name of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change.    pdfresource.processTVs  Process template variables during PDF generation.    pdfresource.tvPrefix  Template variable prefix in the template chunk.     The following MODX system settings have to be created to use them:     Key  Description      pdfresource.creator  Author of the PDF file (defaults to  site_name  system setting).    pdfresource.author  Creator of the PDF file (defaults to  site_url  system setting +  powered by PDFresource/mPDF ).     Resource based PDF options  All these options could be modified on resource base in a template variable  pdf_options  (the template variable name could be changed in MODX system settings). This template variable has to contain an JSON encoded object of options without the prefix  pdfresource. .  Example  {\n     format :  A4-L ,\n     mgl : 20,\n     mgr : 20\n}  PDF content template  The content of the PDF is filled with the chunk defined by  pdfresource.pdfTpl  MODX system setting (or on resource base by the  pdf_options  template variable). By default PDFresource uses the  tplPDF  chunk. You could fill this chunk like a normal MODX template with resource placeholders, snippet calls etc. Since the PDF is not created on the fly, the content is fixed after saving the resource.  PDF styles template  The style of the PDF is set with the chunk defined by  pdfresource.cssTpl  MODX system setting (or on resource base by the  pdf_options  template variable). By default PDFresource uses the  tplCSS  chunk. There are some limitations with mPDF and CSS (i.e.  position: absolute  works only with elements on root level).  Linking to a generated PDF  All generated PDF files are saved with the aliaspath of the generating resource. So if you want to create a link to that PDF file, you could use the following code:  a href= /assets/pdf/[[~[[*parent]]]][[*alias]].pdf PDF /a    \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Usage"
        }
    ]
}