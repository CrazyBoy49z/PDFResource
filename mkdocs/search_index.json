{
    "docs": [
        {
            "location": "/", 
            "text": "PDFresource\n\n\nPDFresource is a MODX Revolution extra that converts resources to PDF files using \nmPDF\n.\n\n\nRequirements\n\n\n\n\nMODX Revolution 2.4+\n\n\nPHP v5.4+\n\n\n\n\nFeatures\n\n\n\n\nCreate a static PDF file of a MODX resource with \nmPDF\n during saving or on viewing the resource.\n\n\nCreate a PDF file of a MODX resource on the fly with \nmPDF\n.\n\n\nThe options for the generated PDF could be set in MODX system settings and on resource base. \n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Home"
        }, 
        {
            "location": "/#pdfresource", 
            "text": "PDFresource is a MODX Revolution extra that converts resources to PDF files using  mPDF .  Requirements   MODX Revolution 2.4+  PHP v5.4+   Features   Create a static PDF file of a MODX resource with  mPDF  during saving or on viewing the resource.  Create a PDF file of a MODX resource on the fly with  mPDF .  The options for the generated PDF could be set in MODX system settings and on resource base.     \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "PDFresource"
        }, 
        {
            "location": "/installation/", 
            "text": "Install from MODX Extras\n\n\nSearch for PDFresource in the Package Manager of a MODX installation and install it in there.\n\n\nManual installation\n\n\nIf you can't access the MODX Extras Repository in your MODX installation, you can manually install PDFresource.\n\n\n\n\nDownload the transport package from \nMODX Extras\n\n  (or one of the pre built transport packages in \n_packages\n)\n\n\nUpload the zip file to your MODX installation's \ncore/packages\n folder.\n\n\nIn the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.\n\n\nPDFresource should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.\n\n\n\n\nBuild it from source\n\n\nTo build and install the package from source you could use \nGit Package Management\n. \nThe GitHub repository of PDFresource contains a \nconfig.json\n \nto build that package locally. After downloading the github repository, you have to change into the \ncore/components/pdfresource\n folder \nand install mpdf with composer by invoking \ncomposer install\n. Use this option, if you want to debug PDFresource and/or contribute \nbugfixes and enhancements.\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-from-modx-extras", 
            "text": "Search for PDFresource in the Package Manager of a MODX installation and install it in there.", 
            "title": "Install from MODX Extras"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "If you can't access the MODX Extras Repository in your MODX installation, you can manually install PDFresource.   Download the transport package from  MODX Extras \n  (or one of the pre built transport packages in  _packages )  Upload the zip file to your MODX installation's  core/packages  folder.  In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown \n  button.  PDFresource should now show up in the list of available packages. Click the corresponding 'Install' button and follow \n  instructions to complete the installation.", 
            "title": "Manual installation"
        }, 
        {
            "location": "/installation/#build-it-from-source", 
            "text": "To build and install the package from source you could use  Git Package Management . \nThe GitHub repository of PDFresource contains a  config.json  \nto build that package locally. After downloading the github repository, you have to change into the  core/components/pdfresource  folder \nand install mpdf with composer by invoking  composer install . Use this option, if you want to debug PDFresource and/or contribute \nbugfixes and enhancements.   \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Build it from source"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\nPDFresource\n works out of the box and creates PDF files from all resources, that have the template variable \ncreate_pdf\n assigned (the template variable name could be changed in MODX system settings). The generated PDF files are saved with the current alias path to \n{assets_url}/pdf/\n\n\nSo after the installation you only have to assign the template variable \ncreate_pdf\n to the templates of the resources that should be converted to PDF and check that template variable in the resource (checked by default).\n\n\nPDF generation on the fly\n\n\nTo generate PDF files on the fly with \nPDFresource\n you have to assign the template variable \nlive_pdf\n to a template (the template variable name could be changed in MODX system settings) and check this template variable on a resource. After this, the resource will be rendered as PDF file in the browser. The file could be saved with the current alias.\n\n\nCaution:\n This option should only be activated, if the content of the resource is dynamically changed. Generating the PDF is a quite resource consuming process and it could take some time.\n\n\nPDF options\n\n\nBy default the PDF content and the CSS code for the PDF could be changed with the chunks \ntplPDF\n and \ntplCSS\n. Some other PDF options (pagesize, margins etc.) could be set in MODX system setting.\n\n\nThe following MODX system settings are available in the namespace \npdfresource\n:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npdfresource.mode\n\n\nmPDF mode, see \nmode parameter\n and \nchoosing a configuration\n in the mPDF documentation for possible values.\n\n\n-\n\n\n\n\n\n\npdfresource.format\n\n\nPDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).\n\n\nA4\n\n\n\n\n\n\npdfresource.defaultFontSize\n\n\nPDF default font size\n\n\n0\n\n\n\n\n\n\npdfresource.defaultFont\n\n\nPDF default font\n\n\n-\n\n\n\n\n\n\npdfresource.mgl\n\n\nPDF margin left\n\n\n15\n\n\n\n\n\n\npdfresource.mgr\n\n\nPDF margin right\n\n\n15\n\n\n\n\n\n\npdfresource.mgt\n\n\nPDF margin top\n\n\n16\n\n\n\n\n\n\npdfresource.mgb\n\n\nPDF margin bottom\n\n\n16\n\n\n\n\n\n\npdfresource.mgh\n\n\nPDF margin header\n\n\n9\n\n\n\n\n\n\npdfresource.mgf\n\n\nPDF margin footer\n\n\n9\n\n\n\n\n\n\npdfresource.orientation\n\n\nPDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).\n\n\nP\n\n\n\n\n\n\npdfresource.pdfTpl\n\n\nTemplate chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file.\n\n\ntplPDF\n\n\n\n\n\n\npdfresource.cssTpl\n\n\nTemplate chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file.\n\n\ntplCSS\n\n\n\n\n\n\npdfresource.pdfTv\n\n\nName ot the template variable that activates the PDF generation.\n\n\ncreate_pdf\n\n\n\n\n\n\npdfresource.pdfTvLive\n\n\nName of the template variable that activates the on the fly PDF generation.\n\n\nlive_pdf\n\n\n\n\n\n\npdfresource.pdfTvOptions\n\n\nName of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change.\n\n\npdf_options\n\n\n\n\n\n\npdfresource.processTVs\n\n\nProcess template variables during PDF generation.\n\n\ntrue\n\n\n\n\n\n\npdfresource.tvPrefix\n\n\nTemplate variable prefix in the template chunk.\n\n\n.tv\n\n\n\n\n\n\npdfresource.customFonts\n\n\nJSON encoded object of custom fonts, see \nCustom fonts\n for an example. Please copy the font files to \n{core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/\n.\n\n\n-\n\n\n\n\n\n\npdfresource.generateOnPrerender\n\n\nGenerate not existing PDF files during OnWebPagePrerender. This option is useful, if you have installed PDFresource in an existing MODX installation. You don't have to save all resources that could generate a PDF file then.\n\n\nfalse\n\n\n\n\n\n\n\n\nThe following MODX system settings have to be created to use them:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npdfresource.creator\n\n\nAuthor of the PDF file (defaults to \nsite_name\n system setting).\n\n\n\n\n\n\npdfresource.author\n\n\nCreator of the PDF file (defaults to \nsite_url\n system setting + \npowered by PDFresource/mPDF\n).\n\n\n\n\n\n\n\n\nResource based PDF options\n\n\nAll these options could be modified on resource base in a template variable \npdf_options\n (the template variable name could be changed in MODX system settings). This template variable has to contain an JSON encoded object of options without the prefix \npdfresource.\n.\n\n\nExample\n\n\n{\n    \nformat\n: \nA4-L\n,\n    \nmgl\n: 20,\n    \nmgr\n: 20\n}\n\n\n\n\nPDF content template\n\n\nThe content of the PDF is filled with the chunk defined by \npdfresource.pdfTpl\n MODX system setting (or on resource base by the \npdf_options\n template variable). By default PDFresource uses the \ntplPDF\n chunk. You could fill this chunk like a normal MODX template with resource placeholders, snippet calls etc. Since the PDF is not created on the fly, the content is fixed after saving the resource.\n\n\nPDF styles template\n\n\nThe style of the PDF is set with the chunk defined by \npdfresource.cssTpl\n MODX system setting (or on resource base by the \npdf_options\n template variable). By default PDFresource uses the \ntplCSS\n chunk. There are some limitations with mPDF and CSS (i.e. \nposition: absolute\n works only with elements on root level).\n\n\nCustom fonts\n\n\nTo use custom fonts in your PDF files, you have to add them as JSON encoded object in the MODX system setting \npdfresource.customFonts\n. See \nFonts\n in the mPDF documentation a the full description. \n\n\nExample\n\n\n{\n  \nfrutiger\n: {\n    \nR\n: \nFrutiger-Normal.ttf\n,\n    \nI\n: \nFrutigerObl-Normal.ttf\n\n  }\n}\n\n\n\n\nPlease copy the font files to \n{core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/\n.\n\n\nLinking to a generated PDF\n\n\nAll generated PDF files are saved with the aliaspath of the generating resource. So if you want to create a link to that PDF file, you could use the following code:\n\n\na href=\n[[*id:pdfresourcelink]]\nPDF\n/a\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "PDFresource  works out of the box and creates PDF files from all resources, that have the template variable  create_pdf  assigned (the template variable name could be changed in MODX system settings). The generated PDF files are saved with the current alias path to  {assets_url}/pdf/  So after the installation you only have to assign the template variable  create_pdf  to the templates of the resources that should be converted to PDF and check that template variable in the resource (checked by default).  PDF generation on the fly  To generate PDF files on the fly with  PDFresource  you have to assign the template variable  live_pdf  to a template (the template variable name could be changed in MODX system settings) and check this template variable on a resource. After this, the resource will be rendered as PDF file in the browser. The file could be saved with the current alias.  Caution:  This option should only be activated, if the content of the resource is dynamically changed. Generating the PDF is a quite resource consuming process and it could take some time.  PDF options  By default the PDF content and the CSS code for the PDF could be changed with the chunks  tplPDF  and  tplCSS . Some other PDF options (pagesize, margins etc.) could be set in MODX system setting.  The following MODX system settings are available in the namespace  pdfresource :     Key  Description  Default      pdfresource.mode  mPDF mode, see  mode parameter  and  choosing a configuration  in the mPDF documentation for possible values.  -    pdfresource.format  PDF page size. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).  A4    pdfresource.defaultFontSize  PDF default font size  0    pdfresource.defaultFont  PDF default font  -    pdfresource.mgl  PDF margin left  15    pdfresource.mgr  PDF margin right  15    pdfresource.mgt  PDF margin top  16    pdfresource.mgb  PDF margin bottom  16    pdfresource.mgh  PDF margin header  9    pdfresource.mgf  PDF margin footer  9    pdfresource.orientation  PDF orientation. If you want to change the orientation of a \"named\" PDF page size you have to append -L to the PDF page size string (i.e. A4-L).  P    pdfresource.pdfTpl  Template chunk for the PDF content. You could use @FILE binding to retreive the chunk from a file.  tplPDF    pdfresource.cssTpl  Template chunk for the PDF style. You could use @FILE binding to retreive the chunk from a file.  tplCSS    pdfresource.pdfTv  Name ot the template variable that activates the PDF generation.  create_pdf    pdfresource.pdfTvLive  Name of the template variable that activates the on the fly PDF generation.  live_pdf    pdfresource.pdfTvOptions  Name of the template variable that change the options of the generated PDF. The content of this template variable has to contain a JSON encoded object of the options you want to change.  pdf_options    pdfresource.processTVs  Process template variables during PDF generation.  true    pdfresource.tvPrefix  Template variable prefix in the template chunk.  .tv    pdfresource.customFonts  JSON encoded object of custom fonts, see  Custom fonts  for an example. Please copy the font files to  {core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/ .  -    pdfresource.generateOnPrerender  Generate not existing PDF files during OnWebPagePrerender. This option is useful, if you have installed PDFresource in an existing MODX installation. You don't have to save all resources that could generate a PDF file then.  false     The following MODX system settings have to be created to use them:     Key  Description      pdfresource.creator  Author of the PDF file (defaults to  site_name  system setting).    pdfresource.author  Creator of the PDF file (defaults to  site_url  system setting +  powered by PDFresource/mPDF ).     Resource based PDF options  All these options could be modified on resource base in a template variable  pdf_options  (the template variable name could be changed in MODX system settings). This template variable has to contain an JSON encoded object of options without the prefix  pdfresource. .  Example  {\n     format :  A4-L ,\n     mgl : 20,\n     mgr : 20\n}  PDF content template  The content of the PDF is filled with the chunk defined by  pdfresource.pdfTpl  MODX system setting (or on resource base by the  pdf_options  template variable). By default PDFresource uses the  tplPDF  chunk. You could fill this chunk like a normal MODX template with resource placeholders, snippet calls etc. Since the PDF is not created on the fly, the content is fixed after saving the resource.  PDF styles template  The style of the PDF is set with the chunk defined by  pdfresource.cssTpl  MODX system setting (or on resource base by the  pdf_options  template variable). By default PDFresource uses the  tplCSS  chunk. There are some limitations with mPDF and CSS (i.e.  position: absolute  works only with elements on root level).  Custom fonts  To use custom fonts in your PDF files, you have to add them as JSON encoded object in the MODX system setting  pdfresource.customFonts . See  Fonts  in the mPDF documentation a the full description.   Example  {\n   frutiger : {\n     R :  Frutiger-Normal.ttf ,\n     I :  FrutigerObl-Normal.ttf \n  }\n}  Please copy the font files to  {core_path}components/pdfresource/vendor/mpdf/mpdf/ttfonts/ .  Linking to a generated PDF  All generated PDF files are saved with the aliaspath of the generating resource. So if you want to create a link to that PDF file, you could use the following code:  a href= [[*id:pdfresourcelink]] PDF /a    \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Usage"
        }, 
        {
            "location": "/donate/", 
            "text": "Support PDFresource\n\n\nPDFresource\n is and always will be free and open-source, but it still requires some man-hours of development and bug-fixing \nbetween the releases.\n\n\nPlease support the ongoing and past development of \nPDFresource\n by making a donation below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Donate"
        }, 
        {
            "location": "/donate/#support-pdfresource", 
            "text": "PDFresource  is and always will be free and open-source, but it still requires some man-hours of development and bug-fixing \nbetween the releases.  Please support the ongoing and past development of  PDFresource  by making a donation below.            \n  var _paq = _paq || [];\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.partout.info/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', 18]);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();", 
            "title": "Support PDFresource"
        }
    ]
}